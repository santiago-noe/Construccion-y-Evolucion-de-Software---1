# Clase que se encarga SOLAMENTE de gestionar las tareas
class GestorTareas:
    def crear_tarea(self):
        # L√≥gica para crear la tarea
        print("‚úÖ Tarea creada correctamente.")

    def actualizar_tarea(self):
        # L√≥gica para actualizar la tarea
        print("‚ôªÔ∏è Tarea actualizada correctamente.")

    def eliminar_tarea(self):
        # L√≥gica para eliminar la tarea
        print("üóëÔ∏è Tarea eliminada correctamente.")


# Clase que se encarga SOLAMENTE de la conexi√≥n con una API externa
class ConectorAPI:
    def conectar_api(self):
        # L√≥gica de conexi√≥n (ejemplo ficticio)
        print("üåê Conectando con la API externa...")
        return "Conexi√≥n exitosa con API"


# Clase que se encarga SOLAMENTE de enviar notificaciones
class Notificador:
    def enviar_notificacion(self):
        # L√≥gica para enviar la notificaci√≥n
        print("üì© Notificaci√≥n enviada al usuario.")


# Clase que se encarga SOLAMENTE de generar informes
class GeneradorInforme:
    def generar_informe(self):
        # L√≥gica para crear el informe
        print("üìä Informe generado correctamente.")


# Clase que se encarga SOLAMENTE de enviar informes
class EnviadorInforme:
    def enviar_informe(self):
        # L√≥gica para enviar el informe
        print("üì§ Informe enviado correctamente.")


# Clase principal para probar todas las funcionalidades
if __name__ == "__main__":
    # 1. Gestionar tareas
    gestor = GestorTareas()
    gestor.crear_tarea()
    gestor.actualizar_tarea()
    gestor.eliminar_tarea()

    # 2. Conectar a una API externa
    api = ConectorAPI()
    print(api.conectar_api())

    # 3. Enviar notificaci√≥n
    notificador = Notificador()
    notificador.enviar_notificacion()

    # 4. Generar informe
    generador = GeneradorInforme()
    generador.generar_informe()

    # 5. Enviar informe
    enviador = EnviadorInforme()
    enviador.enviar_informe()
